{"version":3,"sources":["logo.svg","loading.svg","components/Button.tsx","components/AlbumCover.tsx","components/SoundPreview.tsx","App.tsx","registerServiceWorker.tsx","index.tsx"],"names":["module","exports","Button","onClick","children","AlbumCover","track","style","undefined","src","album","images","url","alt","Sound","require","default","SoundPreview","previewUrl","playStatus","status","PLAYING","EmptyTrack","name","id","height","preview_url","getRandomNumber","x","excludeNumbers","randomNumber","Math","floor","random","includes","App","timeout","useState","tracks","setTracks","index","currentTrack","setCurrentTrack","useEffect","fetch","method","headers","Authorization","then","response","json","data","items","randomIndex","length","setTimeout","getNewTrack","className","loading","secondTrackIndex","thirdTrackIndex","firstTrack","secondTrack","thirdTrack","propositions","array","i","j","shuffleArray","logo","width","map","key","clearTimeout","swal","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","process","toString","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e76b5ade.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import \"./Button.css\"\nimport * as React from \"react\"\n\ntype ButtonProps = {\n  onClick: React.MouseEventHandler<HTMLButtonElement> | undefined\n  children: React.ReactNode\n}\n\nconst Button = ({ onClick, children }: ButtonProps) => <button onClick={onClick}>{children}</button>\n\nexport default Button\n","import * as React from \"react\"\nimport { Track } from \"../App\"\n\ntype AlbumCoverProps = {\n  style?: React.CSSProperties\n  track: Track\n}\n\nexport default function AlbumCover({ track, style }: AlbumCoverProps) {\n  if (track === undefined) return null\n  return <img style={style} src={track.album.images[0]?.url} alt=\"\" />\n}\n","import * as React from \"react\"\nconst Sound = require(\"react-sound\").default\n\ntype SoundPreviewProps = {\n  previewUrl: string\n}\n\nexport default function SoundPreview({ previewUrl }: SoundPreviewProps) {\n  return <Sound url={previewUrl} playStatus={Sound.status.PLAYING} />\n}\n","import swal from \"sweetalert\"\nimport * as React from \"react\"\nimport logo from \"./logo.svg\"\nimport loading from \"./loading.svg\"\nimport \"./App.css\"\nimport Button from \"./components/Button\"\nimport { useEffect, useState } from \"react\"\nimport AlbumCover from \"./components/AlbumCover\"\n\nimport SoundPreview from \"./components/SoundPreview\"\n\nconst apiToken =\n  \"BQB1palzECyR3UN_fPUETsvzyn3IRPXLw2Uoh-c-Q8WP1u6DtgqTXsTSETgLiyuk8wr_7OvRFONNu4CHC_Rw48jluemdm-QhUrIbYz0yy0XbTbr7Rvols_F67bu-U9IcJppYFO95WdJijMbmIQP6jeJEvbd9jbxR-9AgAqF5TNAgOrVc\"\n\nexport const EmptyTrack: Track = {\n  name: \"\",\n  id: \"\",\n  album: { images: [{ height: 0, url: \"\" }] },\n  preview_url: \"\",\n}\n\nfunction shuffleArray(array: Track[]) {\n  if (array === undefined) return\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1))\n    ;[array[i], array[j]] = [array[j] ?? EmptyTrack, array[i] ?? EmptyTrack]\n  }\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x: number, excludeNumbers?: number[]) {\n  let randomNumber = Math.floor(Math.random() * x)\n  if (excludeNumbers === undefined) {\n    return randomNumber\n  }\n  while (excludeNumbers.includes(randomNumber)) {\n    randomNumber = Math.floor(Math.random() * x)\n  }\n  return randomNumber\n}\n\ntype SpotifyAPIResponse = {\n  items: Item[]\n}\n\ntype Item = {\n  added_at: Date\n  track: Track\n}\n\nexport type Track = {\n  name: string\n  id: string\n  album: Album\n  preview_url: string\n}\n\ntype Album = {\n  images: AlbumImage[]\n}\n\ntype AlbumImage = {\n  height: number\n  url: string\n}\n\nexport type TrackWithIndex = {\n  track: Track\n  index: number\n}\n\nconst App = () => {\n  const [tracks, setTracks] = useState<Item[]>()\n  const [currentTrack, setCurrentTrack] = useState({ track: EmptyTrack, index: -1 })\n\n  let timeout: NodeJS.Timeout\n  useEffect(() => {\n    fetch(\"https://api.spotify.com/v1/me/tracks\", {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + apiToken,\n      },\n    })\n      .then((response) => response.json())\n      .then((data: SpotifyAPIResponse) => {\n        setTracks(data.items)\n        const randomIndex = getRandomNumber(data.items.length)\n        setCurrentTrack({\n          track: data.items[randomIndex]?.track ?? EmptyTrack,\n          index: randomIndex,\n        })\n      })\n  }, [])\n\n  useEffect(() => {\n    timeout = setTimeout(() => getNewTrack(), 30000)\n  })\n\n  if (tracks === undefined || currentTrack.index === -1) {\n    return (\n      <div className=\"App\">\n        <img src={loading} className=\"App-logo\" alt=\"logo\" />\n      </div>\n    )\n  }\n\n  const checkAnswer = (id: string) => {\n    if (id === currentTrack.track.id) {\n      clearTimeout(timeout)\n      swal(\"Bravo\", \"Tu as gagné\", \"success\").then(() => getNewTrack())\n    } else {\n      swal(\"Raté\", \"Ce n'est pas la bonne réponse\", \"error\")\n    }\n  }\n\n  const getNewTrack = () => {\n    if (tracks === undefined) {\n      return\n    }\n    const randomIndex = getRandomNumber(tracks.length, [currentTrack.index])\n    setCurrentTrack({\n      track: tracks?.[randomIndex]?.track ?? EmptyTrack,\n      index: randomIndex,\n    })\n  }\n\n  const secondTrackIndex = getRandomNumber(tracks.length, [currentTrack.index])\n  const thirdTrackIndex = getRandomNumber(tracks.length, [currentTrack.index, secondTrackIndex])\n  const firstTrack = currentTrack.track\n  const secondTrack = tracks[secondTrackIndex]?.track\n  const thirdTrack = tracks[thirdTrackIndex]?.track\n\n  const propositions = [firstTrack, secondTrack ?? EmptyTrack, thirdTrack ?? EmptyTrack]\n\n  shuffleArray(propositions)\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        {tracks && <h1 className=\"App-title\">{`Bonjour, il y a ${tracks?.length} musiques`}</h1>}\n      </header>\n      <div className=\"App-images\">\n        <AlbumCover style={{ height: 400, width: 400 }} track={currentTrack.track ?? EmptyTrack} />\n        <SoundPreview previewUrl={currentTrack.track.preview_url ?? undefined} />\n      </div>\n      <div className=\"App-buttons\">\n        {currentTrack.index !== -1 &&\n          propositions.map((track) => {\n            return (\n              <Button key={track.id} onClick={() => checkAnswer(track.id)}>\n                {track.name}\n              </Button>\n            )\n          })}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\")?.indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from \"react\"\nimport * as ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport registerServiceWorker from \"./registerServiceWorker\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\nregisterServiceWorker()\n"],"sourceRoot":""}